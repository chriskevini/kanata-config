(defvar
  tap-timeout 150
  hold-timeout 300
  ralt-hold-timeout 150
  chord-timeout 50
  qw-chord-timeout 100
  df-chord-timeout 100
)

(defalias
  lalt (tap-hold-release $tap-timeout $hold-timeout C-bspc lctl)
  ralt (tap-hold-release $tap-timeout $ralt-hold-timeout ret lsft)
  rctl (tap-hold-press $tap-timeout $hold-timeout esc (layer-while-held num_layer))
  spc (tap-hold-press $tap-timeout $hold-timeout spc (layer-while-held nav_layer))
  
  tgam (layer-switch gaming)
  tdef (layer-switch default)
  
  ;; Chord aliases for default layer
  q (chord qw q)
  w (chord qw w)
  d (chord df d)
  f (chord df f)
  z (chord name z)
  x (chord name x)
  c (chord name c)
  v (chord name v)
  
  ;; Chord aliases for gaming layer
  gz (chord gaming_chords z)
  gx (chord gaming_chords x)
  
  ;; Nav layer aliases
  lalt_nav lctl
  ralt_nav (multi lsft lmet)
  rctl_nav rctl
  
  ;; Num layer aliases
  lalt_num lalt
  ralt_sym lsft
)

(defchords name $chord-timeout
  (c) c
  (v) v
  (c v) M-spc
  (z) z
  (x) x
  (x c) M-A-spc
  (z x) @tgam
)

;; Separate chord group for d+f with longer timeout
;; QMK/Vial split keyboards have timing delays that prevent d+f from working with 50ms timeout
(defchords df $df-chord-timeout
  (d) d
  (f) f
  (d f) tab
)

;; Separate chord group for q+w with longer timeout
;; QMK/Vial split keyboards have timing delays that prevent q+w from working with 50ms timeout
(defchords qw $qw-chord-timeout
  (q) q
  (w) w
  (q w) esc
)

(defchords gaming_chords $chord-timeout
  (z) z
  (x) x
  (z x) @tdef
)

(defsrc
  q        w        e        r        t        y        u        i        o        p
  a        s        d        f        g        h        j        k        l        ;
  z        x        c        v        b        n        m        ,        .        /
                             lalt     spc      ralt     rctl
)

(deflayer default
  @q       @w       _        _        _        _        _        _        _        _
  a        _        @d       @f       _        _        _        _        _        ;
  @z       @x       @c       @v       _        _        _        _        _        _
                             @lalt    @spc     @ralt    @rctl
)

(deflayer gaming
  esc      q        w        e        r        t        y        u        i        o
  lsft     a        s        d        f        g        h        j        k        ;
  tab      @gz      @gx      c        v        b        n        _        _        _
                             lctl     spc      @ralt    rctl
)

(deflayer nav_layer
  M-q      M-w      M-e      M-r      M-t      M-y      M-u      M-up     M-o      M-p
  M-1      M-2      M-3      M-4      M-5      M-h      M-left   M-down   M-right  M-;
  M-z      M-x      M-c      M-v      M-b      M-n      M-m      _        _        _
                             @lalt_nav _       @ralt_nav @rctl_nav
)

(deflayer num_layer
  _        _        _        _        _        _        _        up       _        _
  1        2        3        4        5        _        left     down     right    _
  6        7        8        9        0        _        _        _        _        _
                             @lalt_num _       @ralt_sym _
)

(deflayer sym_layer
  S-1      S-2      [        ]        S-[      S-]      S-7      S-8      S-9      S-0
  S-3      S-4      S-9      S-0      grv      S-grv    -        S-=      =        S-\
  S-5      S-6      [        ]        \        S--      /        _        _        _
                             _        _        @ralt_sym _
)
