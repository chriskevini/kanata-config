(defvar
  tap-timeout 150
  hold-timeout 300
  ralt-hold-timeout 150
  fast-chord-timeout 50
  slow-chord-timeout 100
)

(defalias
  lalt (tap-hold-release $tap-timeout $hold-timeout C-bspc lctl)
  ralt (tap-hold-release $tap-timeout $ralt-hold-timeout ret (layer-toggle ralt_down))
  rctl (tap-hold-press $tap-timeout $hold-timeout esc (layer-while-held num))
  spc (tap-hold-release $tap-timeout $hold-timeout spc (layer-while-held nav))
  
  laltral (layer-while-held ralt_then_lalt)
  
  ;; Chord aliases for base layer
  q (chord slow_chords q)
  w (chord slow_chords w)
  x (chord slow_chords x)
  d (chord slow_chords d)
  f (chord slow_chords f)
  c (chord fast_chords c)
  v (chord fast_chords v)
  z z
  
  ;; Chord aliases for game layer
  escgame (chord game_chords esc)
  tabgame (chord game_chords tab)
  
  ;; Nav layer aliases
  laltnav M-bspc
  raltnav (tap-hold-release $tap-timeout $hold-timeout M-ret (multi lsft lmet)) 
  rctlnav M-esc
  
  ;; Num layer aliases
  laltnum (layer-while-held sym)
  raltsym lsft
)

(defchords fast_chords $fast-chord-timeout
  (c) c
  (v) v
  (c v) M-spc
)

;; QMK/Vial split keyboards have timing delays that require longer timeout
(defchords slow_chords $slow-chord-timeout
  (q) q
  (w) w
  (q w) esc
  (x) x
  (w x) (layer-switch game)
  (d) d
  (f) f
  (d f) tab
)

(defchords game_chords $fast-chord-timeout
  (esc) esc
  (tab) tab
  (esc tab) (layer-switch base)
)

(defsrc
  q        w        e        r        t        y        u        i        o        p
  a        s        d        f        g        h        j        k        l        ;        '
  z        x        c        v        b        n        m        ,        .        /
                             lalt     spc      ralt     rctl
)

(deflayer base
  @q       @w       _        _        _        _        _        _        _        _
  _        _        @d       @f       _        _        _        _        _        _        _
  @z       @x       @c       @v       _        _        _        _        _        _
                             @lalt    @spc     @ralt    @rctl
)

(deflayer game
  @escgame q        w        e        r        t        y        u        i        o
  lsft     a        s        d        f        g        h        j        k        ;        _
  @tabgame _        _        c        v        b        n        _        _        _
                             lctl     spc      @ralt    rctl
)

(deflayer nav
  M-q      M-w      M-e      M-r      M-t      M-y      M-u      M-up     M-o      M-p
  M-1      M-2      M-3      M-4      M-5      M-h      M-left   M-down   M-right  M-;      _
  M-z      M-x      M-c      M-v      M-b      M-n      M-m      _        _        _
                             @laltnav _       @raltnav  @rctlnav
)

(deflayer num
  _        _        _        _        _        _        _        up       _        _
  1        2        3        4        5        _        left     down     right    _        _
  6        7        8        9        0        _        _        _        _        _
                             @laltnum _        _        _
)

(deflayer sym
  S-1      S-2      S-3      ]        S-[      S-]      S-7      S-8      S-9      S-0
  S-3      S-4      S-9      S-0      grv      S-grv    -        S-=      =        S-\      _
  S-5      S-6      [        ]        \        S--      /        _        _        _
                             _        _        _        _
)

(deflayer ralt_down
  _        _        _        _        _        _        _        _        _        _
  _        _        _        _        _        _        _        _        _        _        _
  _        _        _        _        _        _        _        _        _        _
                             @laltral _        _        lsft
)

(deflayer ralt_then_lalt
  _        _        _        _        _        _        _        up       _        _
  1        2        3        4        5        _        left     down     right    _        _
  6        7        8        9        0        _        _        _        _        _
                             _        _        _        _
)
